{"ast":null,"code":"var _jsxFileName = \"/Users/gimseongu/Desktop/dev/Project1-React.js-Bootstrap/project1-video-editor/src/pages/VideoEditor/VideoConversionButton.jsx\";\nimport { Button } from \"antd\";\nimport { fetchFile } from \"@ffmpeg/ffmpeg\";\nimport { readFileAsBase64, sliderValueToVideoTime } from \"../../utils/utils\";\nimport out from \"../../assets/icons/out.svg\";\nimport dark_download from \"../../assets/icons/dark_download.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VideoConversionButton({\n  videoPlayerState,\n  sliderValues,\n  videoFile,\n  ffmpeg,\n  onConversionStart = () => {},\n  onConversionEnd = () => {},\n  onGifCreated = () => {}\n}) {\n  const convertToGif = async () => {\n    // starting the conversion process\n    onConversionStart(true);\n    const inputFileName = \"input.mp4\";\n    const outputFileName = \"output.gif\";\n\n    // writing the video file to memory\n    ffmpeg.FS(\"writeFile\", inputFileName, await fetchFile(videoFile));\n    const [min, max] = sliderValues;\n    const minTime = sliderValueToVideoTime(videoPlayerState.duration, min);\n    const maxTime = sliderValueToVideoTime(videoPlayerState.duration, max);\n\n    // cutting the video and converting it to GIF with a FFMpeg command\n    await ffmpeg.run(\"-i\", inputFileName, \"-ss\", `${minTime}`, \"-to\", `${maxTime}`, \"-f\", \"gif\", outputFileName);\n\n    // reading the resulting file\n    const data = ffmpeg.FS(\"readFile\", outputFileName);\n\n    // converting the GIF file created by FFmpeg to a valid image URL\n    const gifUrl = URL.createObjectURL(new Blob([data.buffer], {\n      type: \"image/gif\"\n    }));\n    const link = document.createElement(\"a\");\n    link.href = gifUrl;\n    link.setAttribute(\"download\", \"\");\n    link.click();\n\n    // ending the conversion process\n\n    onConversionEnd(false);\n  };\n  const onCutTheVideo = async () => {\n    onConversionStart(true);\n    const [min, max] = sliderValues;\n    const minTime = sliderValueToVideoTime(videoPlayerState.duration, min);\n    const maxTime = sliderValueToVideoTime(videoPlayerState.duration, max);\n    ffmpeg.FS(\"writeFile\", \"input.mp4\", await fetchFile(videoFile));\n    await ffmpeg.run(\"-ss\", `${minTime}`, \"-i\", \"input.mp4\", \"-t\", `${maxTime}`, \"-c\", \"copy\", \"output.mp4\");\n    const data = ffmpeg.FS(\"readFile\", \"output.mp4\");\n    const dataURL = await readFileAsBase64(new Blob([data.buffer], {\n      type: \"video/mp4\"\n    }));\n    const link = document.createElement(\"a\");\n    link.href = dataURL;\n    link.setAttribute(\"download\", \"\");\n    link.click();\n    onConversionEnd(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => convertToGif(),\n      className: \"gif__out__btn\",\n      style: {\n        marginBottom: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: out,\n        alt: \"GIF \\uB0B4\\uBCF4\\uB0B4\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"#383838\",\n          fontSize: 16,\n          fontWeight: 700\n        },\n        children: \"GIF \\uB0B4\\uBCF4\\uB0B4\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => onCutTheVideo(),\n      className: \"gif__out__btn\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: dark_download,\n        alt: \"\\uBE44\\uB514\\uC624 \\uC800\\uC7A5\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"#383838\",\n          fontSize: 16,\n          fontWeight: 700\n        },\n        children: \"\\uBE44\\uB514\\uC624 \\uC800\\uC7A5\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = VideoConversionButton;\nexport default VideoConversionButton;\nvar _c;\n$RefreshReg$(_c, \"VideoConversionButton\");","map":{"version":3,"names":["Button","fetchFile","readFileAsBase64","sliderValueToVideoTime","out","dark_download","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoConversionButton","videoPlayerState","sliderValues","videoFile","ffmpeg","onConversionStart","onConversionEnd","onGifCreated","convertToGif","inputFileName","outputFileName","FS","min","max","minTime","duration","maxTime","run","data","gifUrl","URL","createObjectURL","Blob","buffer","type","link","document","createElement","href","setAttribute","click","onCutTheVideo","dataURL","children","onClick","className","style","marginBottom","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","color","fontSize","fontWeight","_c","$RefreshReg$"],"sources":["/Users/gimseongu/Desktop/dev/Project1-React.js-Bootstrap/project1-video-editor/src/pages/VideoEditor/VideoConversionButton.jsx"],"sourcesContent":["import { Button } from \"antd\";\nimport { fetchFile } from \"@ffmpeg/ffmpeg\";\nimport { readFileAsBase64, sliderValueToVideoTime } from \"../../utils/utils\";\nimport out from \"../../assets/icons/out.svg\";\nimport dark_download from \"../../assets/icons/dark_download.svg\";\n\nfunction VideoConversionButton({\n  videoPlayerState,\n  sliderValues,\n  videoFile,\n  ffmpeg,\n  onConversionStart = () => {},\n  onConversionEnd = () => {},\n  onGifCreated = () => {},\n}) {\n  const convertToGif = async () => {\n    // starting the conversion process\n    onConversionStart(true);\n\n    const inputFileName = \"input.mp4\";\n    const outputFileName = \"output.gif\";\n\n    // writing the video file to memory\n    ffmpeg.FS(\"writeFile\", inputFileName, await fetchFile(videoFile));\n\n    const [min, max] = sliderValues;\n    const minTime = sliderValueToVideoTime(videoPlayerState.duration, min);\n    const maxTime = sliderValueToVideoTime(videoPlayerState.duration, max);\n\n    // cutting the video and converting it to GIF with a FFMpeg command\n    await ffmpeg.run(\n      \"-i\",\n      inputFileName,\n      \"-ss\",\n      `${minTime}`,\n      \"-to\",\n      `${maxTime}`,\n      \"-f\",\n      \"gif\",\n      outputFileName\n    );\n\n    // reading the resulting file\n    const data = ffmpeg.FS(\"readFile\", outputFileName);\n\n    // converting the GIF file created by FFmpeg to a valid image URL\n    const gifUrl = URL.createObjectURL(\n      new Blob([data.buffer], { type: \"image/gif\" })\n    );\n\n    const link = document.createElement(\"a\");\n    link.href = gifUrl;\n    link.setAttribute(\"download\", \"\");\n    link.click();\n\n    // ending the conversion process\n\n    onConversionEnd(false);\n  };\n\n  const onCutTheVideo = async () => {\n    onConversionStart(true);\n\n    const [min, max] = sliderValues;\n    const minTime = sliderValueToVideoTime(videoPlayerState.duration, min);\n    const maxTime = sliderValueToVideoTime(videoPlayerState.duration, max);\n\n    ffmpeg.FS(\"writeFile\", \"input.mp4\", await fetchFile(videoFile));\n    await ffmpeg.run(\n      \"-ss\",\n      `${minTime}`,\n      \"-i\",\n      \"input.mp4\",\n      \"-t\",\n      `${maxTime}`,\n      \"-c\",\n      \"copy\",\n      \"output.mp4\"\n    );\n\n    const data = ffmpeg.FS(\"readFile\", \"output.mp4\");\n    const dataURL = await readFileAsBase64(\n      new Blob([data.buffer], { type: \"video/mp4\" })\n    );\n\n    const link = document.createElement(\"a\");\n    link.href = dataURL;\n    link.setAttribute(\"download\", \"\");\n    link.click();\n\n    onConversionEnd(false);\n  };\n\n  return (\n    <>\n      <Button\n        onClick={() => convertToGif()}\n        className=\"gif__out__btn\"\n        style={{ marginBottom: 16 }}\n      >\n        <img src={out} alt=\"GIF 내보내기\" />\n        <p style={{ color: \"#383838\", fontSize: 16, fontWeight: 700 }}>\n          GIF 내보내기\n        </p>\n      </Button>\n\n      <Button onClick={() => onCutTheVideo()} className=\"gif__out__btn\">\n        <img src={dark_download} alt=\"비디오 저장하기\" />\n        <p style={{ color: \"#383838\", fontSize: 16, fontWeight: 700 }}>\n          비디오 저장하기\n        </p>\n      </Button>\n    </>\n  );\n}\n\nexport default VideoConversionButton;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}